{"version":3,"sources":["components/Header.tsx","views/About.tsx","data/place.ts","helpers/getPlace.ts","data/regions.ts","components/Regions.tsx","views/Home.tsx","theme.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","withRouter","history","classes","className","AppBar","color","position","Toolbar","Typography","variant","onClick","push","Button","About","places","id","name","regionId","getPlace","previousId","filtered","filter","p","getRandom","removePrevious","array","Math","floor","random","length","regions","Regions","onChange","useState","selected","setSelected","Form","styled","FormControl","InputLabel","htmlFor","Select","native","labelId","value","event","target","aria-label","map","r","key","Home","place","setPlace","region","setRegion","getNewPlace","Container","maxWidth","Grid","container","direction","justify","alignItems","Box","margin","item","align","size","href","marginTop","defaultTheme","createMuiTheme","palette","primary","main","secondary","breakpoints","typography","pxToRem","overrides","MuiTypography","h1","fontSize","down","h2","App","ThemeProvider","CssBaseline","Header","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4c8fc76b.chunk.js","sourcesContent":["import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nconst ButtonAppBar: React.FC<RouteComponentProps<{}>> = ({ history }) => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar color=\"transparent\" position=\"static\">\n        <Toolbar>\n          <Typography\n            variant=\"h6\"\n            onClick={() => history.push(\"/\")}\n            className={classes.title}\n          >\n            COVID-19 heroes\n          </Typography>\n          <Button color=\"inherit\">Media</Button>\n          <Button color=\"inherit\" onClick={() => history.push(\"/about\")}>\n            Om oss\n          </Button>\n          <Button color=\"inherit\">Så funkar det</Button>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n};\n\nexport default withRouter(ButtonAppBar);\n","import React from \"react\";\n\nconst About = () => {\n  return <div>About</div>;\n};\n\nexport default About;\n","export interface Place {\n  id: string;\n  name: string;\n  description?: string;\n  regionId: string;\n}\n\nexport const places: Place[] = [\n  {\n    id: \"45017923-68dc-4b08-8458-2c7254211ad7\",\n    name: \"Intensivvården Blekinge\",\n    regionId: \"1\",\n  },\n  {\n    id: \"4738c3b7-da23-453b-86c9-8e73085244df\",\n    name: \"Intensivvården Dalarna\",\n    regionId: \"2\",\n  },\n  {\n    id: \"ce451927-7b23-4eab-b269-ade2c144e1b3\",\n    name: \"Intensivvården Gotland\",\n    regionId: \"3\",\n  },\n];\n","import { places, Place } from \"../data/place\";\n\nexport const getPlace = (regionId: string, previousId: string): Place => {\n  if (regionId) {\n    const filtered = places.filter((p) => p.regionId === regionId);\n    return getRandom(removePrevious(filtered, previousId));\n  }\n\n  return getRandom(removePrevious(places, previousId));\n};\n\nconst getRandom = (array: any) => {\n  return array[Math.floor(Math.random() * array.length)];\n};\n\nconst removePrevious = (array: Place[], previousId: string) => {\n  if (array.length && array.length > 1) {\n    return array.filter((p) => p.id !== previousId);\n  }\n\n  return [...array];\n};\n","interface Region {\n  id: string;\n  name: string;\n}\n\nexport const regions: Region[] = [\n  {\n    id: \"\",\n    name: \"Alla regioner\",\n  },\n  {\n    id: \"1\",\n    name: \"Blekinge\",\n  },\n  {\n    id: \"2\",\n    name: \"Dalarna\",\n  },\n  {\n    id: \"3\",\n    name: \"Gotland\",\n  },\n];\n","import React, { useState } from \"react\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport { regions } from \"../data/regions\";\nimport { InputLabel, FormControl } from \"@material-ui/core\";\nimport styled from \"styled-components\";\n\ninterface Props {\n  onChange: (regionId: string) => void;\n}\n\nconst Regions: React.FC<Props> = ({ onChange }) => {\n  const [selected, setSelected] = useState(\"\");\n\n  const handleChange = (event: any) => {\n    setSelected(event.target.value);\n    onChange(event.target.value);\n  };\n\n  const Form = styled(FormControl)`\n    min-width: 200px;\n  `;\n\n  return (\n    <Form>\n      <InputLabel htmlFor=\"age-native-simple\">Välj region</InputLabel>\n      <Select\n        native\n        labelId=\"demo-simple-select-label\"\n        id=\"demo-simple-select\"\n        value={selected}\n        onChange={handleChange}\n      >\n        <option aria-label=\"None\" value=\"\" />\n        {regions.map((r) => (\n          <option key={r.id} value={r.id}>\n            {r.name}\n          </option>\n        ))}\n      </Select>\n    </Form>\n  );\n};\n\nexport default Regions;\n","import React, { useState } from \"react\";\nimport { getPlace } from \"../helpers/getPlace\";\nimport Regions from \"../components/Regions\";\nimport { Button, Typography, Container, Grid, Box } from \"@material-ui/core\";\n\nconst Home: React.FC = () => {\n  const [place, setPlace] = useState(getPlace(\"\", \"\"));\n  const [region, setRegion] = useState<string>(\"\");\n\n  const handleRegionChange = (regionId: string) => {\n    setRegion(regionId);\n    getNewPlace(regionId);\n  };\n\n  const getNewPlace = (regionId?: string) => {\n    if (regionId) {\n      setPlace(getPlace(regionId, place.id));\n    } else {\n      setPlace(getPlace(\"\", place.id));\n    }\n  };\n\n  return (\n    <Container maxWidth=\"xl\">\n      <Grid\n        container\n        direction=\"column\"\n        justify=\"flex-start\"\n        alignItems=\"center\"\n      >\n        <Box margin={5}>\n          <Grid item>\n            <Typography align=\"center\" variant=\"h2\">\n              Grattis du ska ge en donation till\n            </Typography>\n          </Grid>\n          <Grid item>\n            <Typography align=\"center\" variant=\"h1\">\n              {place.name}\n            </Typography>\n          </Grid>\n        </Box>\n        <Grid item>\n          <Box margin={0}>\n            <Button\n              color=\"primary\"\n              variant=\"contained\"\n              size=\"large\"\n              href={`https://naramsin.typeform.com/to/mGysro?id=${place.id}`}\n            >\n              Donera\n            </Button>\n          </Box>\n        </Grid>\n        <Grid item>\n          <Box marginTop={5}>\n            <Typography variant=\"caption\">\n              Nyfiken på att påverka valet själv?\n            </Typography>\n          </Box>\n        </Grid>\n        <Grid item>\n          <Grid\n            container\n            direction=\"row\"\n            justify=\"center\"\n            alignItems=\"flex-end\"\n            spacing={2}\n          >\n            <Grid item>\n              <Regions onChange={handleRegionChange} />\n            </Grid>\n            <Grid item>\n              <Button\n                variant=\"text\"\n                color=\"secondary\"\n                onClick={() => getNewPlace(region)}\n              >\n                Slumpa ny\n              </Button>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Grid>\n    </Container>\n  );\n};\n\nexport default Home;\n","import { createMuiTheme } from \"@material-ui/core\";\n\nconst defaultTheme = createMuiTheme({\n  palette: {\n    primary: {\n      main: \"#00ff00\",\n    },\n    secondary: {\n      main: \"#00aa00\",\n    },\n  },\n});\nconst {\n  breakpoints,\n  typography: { pxToRem },\n} = defaultTheme;\n\nconst theme = {\n  ...defaultTheme,\n  overrides: {\n    MuiTypography: {\n      h1: {\n        fontSize: \"5rem\",\n        [breakpoints.down(\"xs\")]: {\n          fontSize: \"3rem\",\n        },\n      },\n      h2: {\n        fontSize: \"4rem\",\n        [breakpoints.down(\"xs\")]: {\n          fontSize: \"2rem\",\n        },\n      },\n    },\n  },\n};\n\nexport default theme;\n","import React from \"react\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Header from \"./components/Header\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport About from \"./views/About\";\nimport Home from \"./views/Home\";\nimport { ThemeProvider } from \"@material-ui/core\";\nimport theme from \"./theme\";\nimport Test from \"./components/Test\";\n\nfunction App() {\n  return (\n    <>\n      <ThemeProvider theme={theme}>\n        <CssBaseline />\n        {/* <Test /> */}\n        <Router>\n          <Header />\n          <Switch>\n            <Route path=\"/about\">\n              <About />\n            </Route>\n            <Route path=\"/\">\n              <Home />\n            </Route>\n          </Switch>\n        </Router>\n      </ThemeProvider>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}